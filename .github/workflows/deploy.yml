name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  APP_VERSION: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-json-report
      
      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm install
          cd ..
      
      - name: Run Python tests
        run: |
          pytest tests --tb=short --maxfail=3 --capture=no --junitxml=test-results/junit.xml
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
          cd ..
      
      - name: Generate test report
        run: |
          python scripts/test_reporter.py
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            logs/
          retention-days: 7
      
      - name: Run log analysis
        run: |
          python monitor/log_parser.py
      
      - name: Upload log analysis
        uses: actions/upload-artifact@v4
        with:
          name: log-analysis
          path: logs/log_analysis.json
          retention-days: 7
      
      - name: Collect metrics
        run: |
          python monitor/metrics_collector.py
      
      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: metrics/
          retention-days: 7
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      packages: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
      
      - name: Verify environment variables
        run: |
          required_vars=("RAILWAY_API_KEY" "AWS_ROLE_ARN" "SLACK_BOT_TOKEN")
          for var in "${required_vars[@]}"; do
            if [ -z "${{ secrets.$var }}" ]; then
              echo "Error: $var is not set"
              exit 1
            fi
          done
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-north-1
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
          cd ..
      
      - name: Deploy to Railway
        id: deploy
        uses: bervProject/railway-deploy@master
        with:
          service: geometra-ai
          token: ${{ secrets.RAILWAY_API_KEY }}
        env:
          RAILWAY_ENVIRONMENT: production
          APP_VERSION: ${{ env.APP_VERSION }}
      
      - name: Run system check
        run: |
          chmod +x scripts/system_check.sh
          ./scripts/system_check.sh
      
      - name: Upload system check results
        uses: actions/upload-artifact@v4
        with:
          name: system-check
          path: logs/system_check.log
          retention-days: 7
      
      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          sleep 30
          # Run health check
          curl -f https://geometra-ai.railway.app/health || exit 1
      
      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'deployments'
          slack-message: |
            ✅ Deployment successful to production
            Version: ${{ env.APP_VERSION }}
            Commit: ${{ github.sha }}
            Environment: production
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'deployments'
          slack-message: |
            ❌ Deployment failed to production
            Version: ${{ env.APP_VERSION }}
            Commit: ${{ github.sha }}
            Environment: production
            Error: ${{ steps.deploy.outcome }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 